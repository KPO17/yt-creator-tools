import yt_dlp
import re
import json
import os
import tempfile

class SubtitleError(Exception):
    """Exception personnalisée pour les erreurs de sous-titres"""
    pass

def get_subtitles(video_id, format_type='txt', language='fr'):
    """
    Récupère les sous-titres avec yt-dlp et cookies YouTube
    """
    try:
        url = f'https://www.youtube.com/watch?v={video_id}'
        
        # Configuration yt-dlp avec cookies
        ydl_opts = {
            'skip_download': True,
            'writesubtitles': True,
            'writeautomaticsub': True,
            'subtitleslangs': [language, 'en', 'fr'],
            'quiet': True,
            'no_warnings': True,
            'socket_timeout': 30,
            'extract_flat': False,
        }
        
        # Gestion des cookies
        cookies_file = setup_cookies()
        if cookies_file:
            ydl_opts['cookiefile'] = cookies_file
            print(f"✅ Utilisation des cookies: {cookies_file}")
        else:
            print("⚠️  Aucun cookie disponible - mode sans authentification")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            # Récupérer les sous-titres disponibles
            subtitles = info.get('subtitles', {})
            automatic_captions = info.get('automatic_captions', {})
            
            # Combiner les deux sources
            all_subs = {**automatic_captions, **subtitles}
            
            if not all_subs:
                raise SubtitleError('Aucun sous-titre disponible pour cette vidéo')
            
            # Chercher la langue demandée
            selected_lang = None
            is_auto = False
            
            if language in subtitles:
                selected_lang = language
                subtitle_data = subtitles[language]
            elif language in automatic_captions:
                selected_lang = language
                subtitle_data = automatic_captions[language]
                is_auto = True
            elif 'en' in subtitles:
                selected_lang = 'en'
                subtitle_data = subtitles['en']
            elif 'en' in automatic_captions:
                selected_lang = 'en'
                subtitle_data = automatic_captions['en']
                is_auto = True
            else:
                # Prendre le premier disponible
                selected_lang = list(all_subs.keys())[0]
                subtitle_data = all_subs[selected_lang]
                is_auto = selected_lang in automatic_captions
            
            # Télécharger les sous-titres au format JSON3
            json3_format = None
            for fmt in subtitle_data:
                if fmt.get('ext') == 'json3':
                    json3_format = fmt
                    break
            
            if not json3_format:
                raise SubtitleError('Format de sous-titres non supporté')
            
            # Télécharger le contenu
            import urllib.request
            response = urllib.request.urlopen(json3_format['url'])
            json_data = json.loads(response.read().decode('utf-8'))
            
            # Parser le JSON YouTube
            transcript_data = parse_youtube_json(json_data)
            
            if not transcript_data:
                raise SubtitleError('Impossible de parser les sous-titres')
            
            # Formater selon le type demandé
            if format_type == 'txt':
                content = format_as_text(transcript_data)
            elif format_type == 'srt':
                content = format_as_srt(transcript_data)
            elif format_type == 'vtt':
                content = format_as_vtt(transcript_data)
            else:
                content = format_as_text(transcript_data)
            
            return {
                'videoId': video_id,
                'language': selected_lang,
                'format': format_type,
                'content': content,
                'lineCount': len(transcript_data),
                'isAutoGenerated': is_auto,
                'method': 'yt-dlp_with_cookies'
            }
    
    except yt_dlp.utils.DownloadError as e:
        error_msg = str(e)
        if 'Video unavailable' in error_msg:
            raise SubtitleError('Vidéo non disponible')
        elif 'Sign in to confirm' in error_msg:
            raise SubtitleError('Blocage anti-bot détecté - les cookies sont nécessaires')
        raise SubtitleError(f'Erreur de téléchargement : {error_msg}')
    
    except Exception as e:
        import traceback
        print(f"Erreur détaillée: {traceback.format_exc()}")
        raise SubtitleError(f'Erreur : {type(e).__name__} - {str(e)}')

def setup_cookies():
    """
    Configure les cookies YouTube depuis les variables d'environnement ou fichiers
    """
    # 1. Essayer la variable d'environnement (pour Render)
    cookies_env = os.getenv('YOUTUBE_COOKIES')
    if cookies_env:
        try:
            # Créer un fichier temporaire avec les cookies
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write(cookies_env)
                cookies_path = f.name
                print(f"✅ Cookies chargés depuis variable d'environnement: {cookies_path}")
                return cookies_path
        except Exception as e:
            print(f"❌ Erreur création fichier cookies: {e}")
    
    # 2. Essayer le fichier local (pour développement)
    local_cookies = 'cookies.txt'
    if os.path.exists(local_cookies):
        print(f"✅ Cookies locaux trouvés: {local_cookies}")
        return local_cookies
    
    # 3. Essayer dans le dossier api
    api_cookies = os.path.join(os.path.dirname(__file__), 'cookies.txt')
    if os.path.exists(api_cookies):
        print(f"✅ Cookies API trouvés: {api_cookies}")
        return api_cookies
    
    return None

def parse_youtube_json(json_data):
    """Parse le format JSON3 de YouTube"""
    transcript = []
    
    try:
        events = json_data.get('events', [])
        
        for event in events:
            if 'segs' not in event:
                continue
            
            start_time = event.get('tStartMs', 0) / 1000.0
            duration = event.get('dDurationMs', 0) / 1000.0
            
            # Concaténer tous les segments de texte
            text_parts = []
            for seg in event['segs']:
                if 'utf8' in seg:
                    text_parts.append(seg['utf8'])
            
            text = ''.join(text_parts).strip()
            
            if text:
                transcript.append({
                    'text': text,
                    'start': start_time,
                    'duration': duration
                })
        
        return transcript
    
    except Exception as e:
        print(f"Erreur parsing JSON : {e}")
        return []

def get_available_languages(video_id):
    """Récupère la liste des langues disponibles"""
    try:
        url = f'https://www.youtube.com/watch?v={video_id}'
        
        ydl_opts = {
            'skip_download': True,
            'quiet': True,
            'no_warnings': True,
        }
        
        # Ajouter les cookies si disponibles
        cookies_file = setup_cookies()
        if cookies_file:
            ydl_opts['cookiefile'] = cookies_file
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            subtitles = info.get('subtitles', {})
            automatic_captions = info.get('automatic_captions', {})
            
            languages = []
            
            # Sous-titres manuels
            for lang in subtitles.keys():
                languages.append({
                    'code': lang,
                    'name': lang.upper(),
                    'isAutoGenerated': False,
                    'isTranslatable': True
                })
            
            # Sous-titres auto-générés
            for lang in automatic_captions.keys():
                if lang not in subtitles:  # Éviter les doublons
                    languages.append({
                        'code': lang,
                        'name': f"{lang.upper()} (Auto)",
                        'isAutoGenerated': True,
                        'isTranslatable': True
                    })
            
            return languages
    
    except Exception as e:
        raise SubtitleError(f'Erreur : {str(e)}')

# Fonctions de formatage (gardez vos fonctions existantes)
def format_as_text(transcript_data):
    """Formate en texte brut"""
    text_parts = []
    
    for entry in transcript_data:
        text = entry['text'].strip()
        text = re.sub(r'\[.*?\]', '', text)
        if text:
            text_parts.append(text)
    
    full_text = ' '.join(text_parts)
    full_text = re.sub(r'([.!?])\s+', r'\1\n\n', full_text)
    
    return full_text.strip()

def format_as_srt(transcript_data):
    """Formate en SRT"""
    srt_content = []
    
    for i, entry in enumerate(transcript_data, start=1):
        start_time = format_timestamp_srt(entry['start'])
        end_time = format_timestamp_srt(entry['start'] + entry['duration'])
        text = entry['text'].strip()
        
        srt_content.append(f"{i}")
        srt_content.append(f"{start_time} --> {end_time}")
        srt_content.append(text)
        srt_content.append("")
    
    return '\n'.join(srt_content)

def format_as_vtt(transcript_data):
    """Formate en WebVTT"""
    vtt_content = ["WEBVTT", ""]
    
    for entry in transcript_data:
        start_time = format_timestamp_vtt(entry['start'])
        end_time = format_timestamp_vtt(entry['start'] + entry['duration'])
        text = entry['text'].strip()
        
        vtt_content.append(f"{start_time} --> {end_time}")
        vtt_content.append(text)
        vtt_content.append("")
    
    return '\n'.join(vtt_content)

def format_timestamp_srt(seconds):
    """Format SRT : HH:MM:SS,mmm"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    millis = int((seconds % 1) * 1000)
    
    return f"{hours:02d}:{minutes:02d}:{secs:02d},{millis:03d}"

def format_timestamp_vtt(seconds):
    """Format VTT : HH:MM:SS.mmm"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    millis = int((seconds % 1) * 1000)
    
    return f"{hours:02d}:{minutes:02d}:{secs:02d}.{millis:03d}"