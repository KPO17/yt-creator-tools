from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import sys

# Ajouter le r√©pertoire courant au path Python
sys.path.append(os.path.dirname(__file__))

# Cr√©er l'application Flask ICI
app = Flask(__name__, static_folder='..', static_url_path='')

# Configuration CORS
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})

# Import des fonctions de sous-titres APR√àS la cr√©ation de l'app
try:
    # from subtitles import get_subtitles, SubtitleError
    # subtitles_available = True
    subtitles_available = False  # D√©sactiv√© pour √©viter les erreurs
    print("‚úÖ yt-dlp d√©sactiv√© (bloqu√© sur Render)")
except ImportError as e:
    print(f"Info: yt-dlp non disponible: {e}")
    subtitles_available = False

try:
    from subtitles_fallback import get_subtitles_fallback, SubtitleError
    fallback_available = True
    print("‚úÖ Module subtitles_fallback charg√©")
except ImportError as e:
    print(f"‚ùå Erreur: subtitles_fallback non disponible: {e}")
    fallback_available = False

# Route pour servir les fichiers statiques
@app.route('/')
def serve_index():
    return send_from_directory('..', 'index.html')

@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory('..', path)

# Route sant√©
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'ok',
        'service': 'YT Creator Tools API',
        'version': '2.0.0',
        'subtitles_available': subtitles_available,
        'fallback_available': fallback_available
    }), 200

# Route principale pour r√©cup√©rer les sous-titres
@app.route('/api/subtitles', methods=['POST', 'OPTIONS'])
def get_video_subtitles():
    if request.method == 'OPTIONS':
        return '', 200
    
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Corps de requ√™te manquant'}), 400
        
        video_id = data.get('videoId')
        format_type = data.get('format', 'txt')
        language = data.get('language', 'fr')
        
        if not video_id:
            return jsonify({'error': 'videoId manquant'}), 400
        
        valid_formats = ['txt', 'srt', 'vtt']
        if format_type not in valid_formats:
            return jsonify({
                'error': f'Format invalide. Formats accept√©s: {", ".join(valid_formats)}'
            }), 400
        
        # UTILISER UNIQUEMENT LA M√âTHODE FALLBACK
        if not fallback_available:
            return jsonify({'error': 'Service de sous-titres temporairement indisponible'}), 503
        
        try:
            print(f"üéØ Demande de sous-titres: {video_id}, format: {format_type}, langue: {language}")
            result = get_subtitles_fallback(video_id, format_type, language)
            print(f"‚úÖ Sous-titres r√©cup√©r√©s: {len(result['content'])} caract√®res")
            return jsonify(result), 200
        except SubtitleError as fallback_error:
            print(f"‚ùå Erreur sous-titres: {fallback_error}")
            return jsonify({
                'error': f'Impossible de r√©cup√©rer les sous-titres: {str(fallback_error)}'
            }), 404
    
    except Exception as e:
        print(f"üî• Erreur serveur: {e}")
        return jsonify({
            'error': 'Erreur interne du serveur',
            'details': str(e) if os.getenv('FLASK_ENV') == 'development' else None
        }), 500

# Route pour lister les langues disponibles (simplifi√©e)
@app.route('/api/subtitles/languages/<video_id>', methods=['GET'])
def get_available_languages(video_id):
    try:
        # Pour l'instant, retourner les langues principales
        languages = [
            {'code': 'fr', 'name': 'Fran√ßais', 'isAutoGenerated': True},
            {'code': 'en', 'name': 'English', 'isAutoGenerated': True},
            {'code': 'es', 'name': 'Espa√±ol', 'isAutoGenerated': True},
            {'code': 'de', 'name': 'Deutsch', 'isAutoGenerated': True},
        ]
        return jsonify({
            'videoId': video_id,
            'languages': languages
        }), 200
    
    except Exception as e:
        return jsonify({
            'error': 'Erreur lors de la r√©cup√©ration des langues',
            'details': str(e)
        }), 500

# Route de test
@app.route('/api/test', methods=['GET'])
def test_api():
    return jsonify({
        'message': 'API YT Creator Tools fonctionne!',
        'status': 'online',
        'subtitles_method': 'fallback_api',
        'fallback_available': fallback_available
    })

# Gestion des erreurs
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Route non trouv√©e'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Erreur interne du serveur'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'
    print(f"üöÄ D√©marrage de l'application sur le port {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)